import React, { useState } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import { Link } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faBars, faSignOutAlt } from '@fortawesome/free-solid-svg-icons';
import {
  HomeIcon,
  UserIcon,
  GlobeAltIcon,
  InformationCircleIcon,
  PhoneIcon,
  Cog6ToothIcon,
} from '@heroicons/react/24/outline';
import { FaWallet, FaBlog } from 'react-icons/fa';
import Clock from 'react-live-clock';
import ROLE from '../common/role';
import NotificationBadge from "../helper/NotificationBadge";

const SidePanel = ({ open, setOpen, user, timezone, setTimezone, timezones, handleLogout, loading }) => {
  const [showTimezones, setShowTimezones] = useState(false);

  const handleLinkClick = () => setOpen(false);
  const toggleTimezones = () => setShowTimezones(!showTimezones);
  const handleTimezoneChange = (tz) => {
    setTimezone(tz);
    setShowTimezones(false);
  };
 const getSelectedTimezoneLabel = () =>
  Array.isArray(timezones) ? timezones.find((tz) => tz.value === timezone)?.label : null;


  return (
    <Transition.Root show={open} as={React.Fragment}>
      <Dialog as="div" className="fixed inset-0 z-50 md:hidden" onClose={() => setOpen(false)}>
        <Transition.Child
          as={React.Fragment}
          enter="transform transition ease-in-out duration-300"
          enterFrom="-translate-x-full"
          enterTo="translate-x-0"
          leave="transform transition ease-in-out duration-300"
          leaveFrom="translate-x-0"
          leaveTo="-translate-x-full"
        >
          <Dialog.Panel className="relative flex flex-col w-full max-w-sm h-full panel-glass shadow-xl rounded-r-lg overflow-y-auto pb-6">

            {/* Header */}
            <div className="flex items-center justify-between px-4 py-4 mt-10 border-b border-gray-200 shadow-sm card-soft">
              <button
                type="button"
                className="text-gray-500 hover:text-blue-600 transition"
                onClick={() => setOpen(false)}
              >
                <FontAwesomeIcon icon={faBars} className="h-5 w-5" />
              </button>

              <Link to="/notifications" title="Notifications" aria-label="Notifications" onClick={handleLinkClick}>
                <NotificationBadge />
              </Link>

              <button
                onClick={handleLogout}
                disabled={loading}
                className="bg-red-500 hover:bg-red-600 text-white text-sm font-semibold py-2 px-4 rounded-md shadow-md transition-all hover-scale"
              >
                <FontAwesomeIcon icon={faSignOutAlt} className="mr-2" /> Logout
              </button>
            </div>

            {/* Navigation */}
            <nav className="mt-4 px-4 space-y-3">
              {[
                { path: '/home', icon: <HomeIcon className="h-5 w-5" />, label: 'Home' },
                { path: '/section', icon: <GlobeAltIcon className="h-5 w-5" />, label: 'Marketplace' },
                { path: '/profile', icon: <UserIcon className="h-5 w-5" />, label: 'Profile' },
                { path: '/record', icon: <InformationCircleIcon className="h-5 w-5" />, label: 'Trade Status' },
                { path: '/mywallet', icon: <FaWallet className="h-5 w-5" />, label: 'Wallet' },
                { path: '/datapad', icon: <FaBlog className="h-5 w-5" />, label: 'DataPad' },
                { path: '/report', icon: <PhoneIcon className="h-5 w-5" />, label: 'Connect with us' },
                ...(user?.role === ROLE.ADMIN
                  ? [{
                      path: '/admin-panel',
                      icon: <Cog6ToothIcon className="h-5 w-5" />,
                      label: 'Admin Panel',
                    }]
                  : []),
              ].map(({ path, icon, label }) => (
                <Link
                  key={label}
                  to={path}
                  onClick={handleLinkClick}
                  className="flex items-center px-4 py-2 rounded-md border border-gray-200 bg-white text-gray-800 hover:bg-blue-50 hover:text-blue-600 transition-all text-sm font-medium shadow-sm hover-glow hover-scale"
                >
                  <span className="mr-3 text-gray-400 group-hover:text-blue-500">{icon}</span>
                  {label}
                </Link>
              ))}
            </nav>

            {/* Timezone Selector */}
            <div className="mt-6 px-4">
              <button
                type="button"
                onClick={toggleTimezones}
                className="w-full flex items-center justify-between px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-md text-sm text-gray-700 font-medium transition hover-scale"
              >
                <div className="flex items-center">
                  <GlobeAltIcon className="mr-2 h-5 w-5 text-gray-500" />
                  {getSelectedTimezoneLabel() || 'Select Timezone'}
                </div>
                <svg
                  className={`h-5 w-5 text-gray-400 transform transition-transform ${showTimezones ? 'rotate-180' : ''}`}
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path fillRule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clipRule="evenodd" />
                </svg>
              </button>

              {showTimezones && (
                <div className="mt-2 bg-white border border-gray-200 rounded-md shadow-inner max-h-48 overflow-y-auto card-soft">
                  <ul className="py-1 text-sm">
              {Array.isArray(timezones) && timezones.map((tz) => (
                      <li key={tz.value}>
                        <button
                          onClick={() => handleTimezoneChange(tz.value)}
                          className={`w-full text-left px-4 py-2 hover:bg-gray-100 ${
                            timezone === tz.value ? 'text-blue-600 font-semibold' : 'text-gray-800'
                          }`}
                        >
                          {tz.label}
                          {timezone === tz.value && (
                            <svg className="ml-2 h-4 w-4 inline text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                            </svg>
                          )}
                        </button>
                      </li>
                      ))}
                  </ul>
                </div>
              )}
            </div>

            {/* Time Display */}
            <div className="mt-6 px-4 text-center">
              <Clock
                format={'HH:mm:ss'}
                ticking={true}
                timezone={timezone}
                className="text-xl font-semibold text-gray-700"
              />
              <Clock
                format={'dddd, MMMM Do YYYY'}
                ticking={true}
                timezone={timezone}
                className="text-sm text-gray-500"
              />
            </div>
          </Dialog.Panel>
        </Transition.Child>
      </Dialog>
    </Transition.Root>
  );
};

export default SidePanel;
