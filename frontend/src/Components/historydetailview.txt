import React, { useState } from 'react';
import { CgClose } from "react-icons/cg";
import DisplayImage from './DisplayImage';
import { toast } from 'react-toastify';
import SummaryApi from '../common';
import { motion } from "framer-motion";

const HistoryDetailView = ({
  onClose = () => { },
  fetchData = () => { },
  productDetails = {},
}) => {
  const [data] = useState({
    _id: productDetails?._id || "",
    Image: productDetails?.Image || [],
    totalAmount: productDetails?.totalAmount || "",
    calculatedTotalAmount: productDetails?.calculatedTotalAmount || "",
    userRemark: productDetails?.userRemark || "",
    // Fix: Properly handle cancel image - check multiple possible field names
    crImage: productDetails?.crImage || productDetails?.cancelImage || productDetails?.image || null,
    status: productDetails?.status || "WAIT",
    cancelReason: productDetails?.cancelReason || productDetails?.reason || "",
  });

  const [openFullScreenImage, setOpenFullScreenImage] = useState(false);
  const [fullScreenImage, setFullScreenImage] = useState("");
  const [openFullScreenCrImage, setOpenFullScreenCrImage] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await fetch(SummaryApi.marketRecord.url, {
        method: SummaryApi.marketRecord.method,
        credentials: 'include',
        headers: {
          "content-type": "application/json",
        },
        body: JSON.stringify(data),
      });

      const responseData = await response.json();

      if (responseData.success) {
        toast.success(responseData.message);
        onClose();
        fetchData();
      } else {
        toast.error(responseData.message || "An error occurred.");
      }
    } catch (error) {
      toast.error("Failed to update record.");
    }
  };

  // Helper function to get cancel image(s)
  const getCancelImages = () => {
    // Handle both single image and array of images
    if (data.crImage) {
      return Array.isArray(data.crImage) ? data.crImage : [data.crImage];
    }
    return [];
  };

  const cancelImages = getCancelImages();

  const handleImageClick = (imageUrl) => {
    console.log("Image clicked:", imageUrl); // Debug log
    setFullScreenImage(imageUrl); // Set the selected image URL
    setOpenFullScreenImage(true); // Open the full-screen image viewer
  };

  return (
    <motion.div
      className="fixed inset-0 flex items-start justify-center bg-black bg-opacity-70 p-4 z-50"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <div className="bg-gradient-to-br from-gray-900 via-gray-800 to-gray-950 p-6 rounded-2xl w-full max-w-2xl shadow-2xl mt-10"
        style={{ maxHeight: '85vh', overflowY: 'auto' }}>

        <div className="flex justify-between items-center mb-6">
          <h2 className="font-extrabold text-2xl text-yellow-400">Transaction Details</h2>
          <button className="text-2xl text-gray-400 hover:text-yellow-400 cursor-pointer" onClick={onClose}>
            <CgClose />
          </button>
        </div>

        {/* Product Overview */}
        {productDetails && (
          <div className="border overflow-x-hidden rounded-lg p-4 bg-gray-950 shadow-inner mb-6">
            <div className="flex items-center gap-4">
              {productDetails?.productImage?.[0] && (
                <img
                  src={productDetails.productImage[0]}
                  alt="Product"
                  className="w-24 h-24 object-cover rounded-lg border border-yellow-700"
                />
              )}
              <div>
                <h3 className="font-bold text-yellow-400 text-lg">{productDetails.productName}</h3>
                <p className="text-gray-300">Currency: {productDetails.pricing?.[0]?.currency || 'N/A'}</p>
                <p className="text-gray-300">Face Value: {productDetails.pricing?.[0]?.faceValues?.[0]?.faceValue || 'N/A'}</p>
                <p className="text-gray-300">Rate: {productDetails.pricing?.[0]?.faceValues?.[0]?.sellingPrice || 'N/A'}</p>
              </div>
            </div>
            {productDetails.description && (
              <p className="text-gray-400 mt-4">{productDetails.description}</p>
            )}
          </div>
        )}

        <form className="space-y-6" onSubmit={handleSubmit}>
          {/* User Uploaded Images */}
          <div>
            <label className="block font-medium text-yellow-400 mb-2">Your Uploaded Images:</label>
            <div className="flex gap-2 mt-4 flex-wrap">
              {data?.Image && data.Image.length > 0 ? (
                data.Image.map((el, index) => (
                  <div
                    className="relative group"
                    key={`${el}-${index}`} // Ensure unique keys
                    style={{ zIndex: 10 }}
                  >
                    <img
                      src={el}
                      alt={`product-${index}`}
                      className="w-20 h-20 object-cover rounded-lg border border-yellow-700 cursor-pointer hover:scale-105 transition-transform duration-200"
                      onClick={() => handleImageClick(el)} // Handle image click
                    />
                  </div>
                ))
              ) : (
                <p className="text-red-400 text-sm">*No images uploaded</p>
              )}
            </div>
          </div>

          {/* Transaction Details */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block font-medium text-yellow-400 mb-2">Total Face Value:</label>
              <div className="text-gray-200 bg-gray-800 p-3 rounded-lg">{data.totalAmount || 'N/A'}</div>
            </div>
            <div>
              <label className="block font-medium text-yellow-400 mb-2">Total Amount (NGN):</label>
              <div className="text-gray-200 bg-gray-800 p-3 rounded-lg">â‚¦{parseFloat(data.calculatedTotalAmount || 0).toLocaleString()}</div>
            </div>
          </div>

          {/* Card Code */}
          {productDetails.cardcode && (
            <div>
              <label className="block font-medium text-yellow-400 mb-2">Card Code:</label>
              <div className="text-gray-200 bg-gray-800 p-3 rounded-lg font-mono text-sm break-all">{productDetails.cardcode}</div>
            </div>
          )}

          {/* Remarks */}
          <div>
            <label className="block font-medium text-yellow-400 mb-2">Your Remarks:</label>
            <div className="text-gray-200 bg-gray-800 p-3 rounded-lg whitespace-pre-wrap">{data.userRemark || 'No remarks provided'}</div>
          </div>

          {/* Status */}
          <div>
            <label className="block font-medium text-yellow-400 mb-2">Status:</label>
            <div className={`inline-block px-3 py-1 rounded-full text-sm font-semibold ${
              data.status === 'DONE' ? 'bg-green-900 text-green-200' :
              data.status === 'PROCESSING' ? 'bg-yellow-900 text-yellow-200' :
              data.status === 'CANCEL' ? 'bg-red-900 text-red-200' :
              'bg-gray-700 text-gray-300'
            }`}>
              {data.status || 'PENDING'}
            </div>
          </div>

          {/* Cancel Reason and Images (only show if status is CANCEL) */}
          {data.status === 'CANCEL' && (
            <>
              {data.cancelReason && (
                <div>
                  <label className="block font-medium text-red-400 mb-2">Cancel Reason:</label>
                  <div className="text-red-200 bg-red-900/20 border border-red-500/30 p-3 rounded-lg whitespace-pre-wrap">
                    {data.cancelReason}
                  </div>
                </div>
              )}

              {cancelImages.length > 0 && (
                <div>
                  <label className="block font-medium text-red-400 mb-2">Cancel Reason Images:</label>
                  <div className="flex gap-2 flex-wrap">
                    {cancelImages.map((imageUrl, index) => (
                      <div key={index} className="relative group">
                        <img
                          src={imageUrl}
                          alt={`Cancel reason ${index + 1}`}
                          className="w-20 h-20 object-cover rounded-lg border border-red-500 cursor-pointer hover:scale-105 transition-transform duration-200"
                          onClick={() => {
                            setFullScreenImage(imageUrl); // Set the image URL
                            setOpenFullScreenImage(true); // Open the full-screen viewer
                          }}
                        />
                        <div className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                          {index + 1}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </>
          )}

          {/* Timestamp */}
          {productDetails.timestamp && (
            <div>
              <label className="block font-medium text-yellow-400 mb-2">Transaction Date:</label>
              <div className="text-gray-200 bg-gray-800 p-3 rounded-lg">
                {new Date(productDetails.timestamp).toLocaleString()}
              </div>
            </div>
          )}
        </form>
      </div>

      {/* Full Screen Image Modals */}
      {openFullScreenImage && fullScreenImage && (
        <DisplayImage
          imgUrl={fullScreenImage} // Pass the selected image URL
          onClose={() => {
            console.log("Closing DisplayImage"); // Debug log
            setOpenFullScreenImage(false);
            setFullScreenImage(""); // Clear the image URL
          }}
        />
      )}

      {openFullScreenCrImage && (
        <DisplayImage
          onClose={() => setOpenFullScreenCrImage(false)}
          imgUrl={fullScreenImage}
        />
      )}
    </motion.div>
  );
};

export default HistoryDetailView;